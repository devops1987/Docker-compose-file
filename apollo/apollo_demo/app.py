import os
import http.server
import socketserver
from urllib.parse import urlparse
from urllib.parse import parse_qs
from apollo.apollo_client import ApolloClient

app_id = os.getenv("APOLLO_APP_ID", "SampleApp")
cluster = os.getenv("APOLLO_CLUSTER", "default")
config_server_url = os.getenv("APOLLO_CONFIG_SERVER_URL", "http://localhost:8080")

print("app_id:", app_id)
print("cluster:", cluster)
print("config_server_url:", config_server_url)


class MyHttpRequestHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        # Sending an '200 OK' response
        self.send_response(200)

        # Setting the header
        self.send_header("Content-type", "text/html")

        # Whenever using 'send_header', you also have to call 'end_headers'
        self.end_headers()

        # Extract query param
        key = 'timeout'
        namespace = 'application'
        query_components = parse_qs(urlparse(self.path).query)
        if 'key' in query_components:
            key = query_components["key"][0]
        if 'namespace' in query_components:
            namespace = query_components["namespace"][0]

        try:
            config = ApolloClient(app_id=app_id, cluster=cluster, config_server_url=config_server_url)
            value = config.get_value(key, f"not found!", namespace)
        except Exception as e:
            print("get_value:", e)
            value = e

        # Some custom HTML code, possibly generated by another function
        html = f"<html><head></head><body><h1>Apollo Demo</h1><p><span><a href='./?namespace=&key='>change key ?namespace=&key= " \
               f"</a></span></p> <p>[{namespace}] {key}: {value}</p></body></html>".format(namespace=namespace, key=key, value=value)

        # Writing the HTML contents with UTF-8
        self.wfile.write(bytes(html, "utf8"))

        return


# Create an object of the above class
handler_object = MyHttpRequestHandler

PORT = 8000
my_server = socketserver.TCPServer(("", PORT), handler_object)

# Star the server
print("Listen 0.0.0.0:{port}".format(port=PORT))
my_server.serve_forever()
